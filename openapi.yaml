openapi: 3.0.0
info:
  title: Snort3 API
  description: >-
    This is API provide interaction with Snort3 IPS and IDS.
  version: 0.0.2
servers:
  - url: http://{ip}:{port}/api/v1
    description: Development server
    variables:
      port:
        default: '8000'
      ip:
        default: localhost
components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sid:
          type: integer
          format: int64
        timestamp:
          type: string
          format: timestamp
        src_addr:
          type: string
        src_port:
          type: integer
          format: int64
        dst_addr:
          type: string
        dst_port:
          type: integer
          format: int64
        proto:
          type: string
        action:
          type: string
          enum:
            - allow
            - alert
            - block
            - drop
            - log
            - pass
        message:
          type: string
      example:
        id: 3895
        sid: 254
        timestamp: 2023-12-13T15:18:49+02:00
        src_addr: 192.168.10.3
        src_port: 53
        dst_addr: 192.168.10.5
        dst_port: 49544
        proto: UDP
        action: allow
        msg: PROTOCOL-DNS SPOOF query response with TTL of 1 min. and no authority

    EventCountSid:
      type: object
      properties:
        sid:
          type: integer
        count:
          type: integer
      example:
        sid: 1
        count: 2

    EventCountAddr:
      type: object
      properties:
        addr_pair:
          type: string
        count:
          type: integer
      example:
        addr_pair: "127.0.0.1/127.0.0.2"
        count: 2

    Request:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_addr:
          type: string
        http_method:
          type: string
        endpoint:
          type: string
        timestamp:
          type: string
          format: timestamp
        response:
          type: integer
          format: int64
        request_data:
          type: string
          format: json
      example:
        id: 12
        timestamp: 2024-01-09T20:25:50.743634+02:00
        user_addr: 127.0.0.1
        http_method: GET
        endpoint: "/api/v1/events"
        response: 200,
        request_data:
          period_stop: "2024-01-09"
          period_start: "2024-01-05"

    Performance:
      type: object
      properties:
        timestamp:
          type: string
          format: timestamp
        module:
          type: string
        pegcounts:
          type: string
          format: json
      example:
        timestamp: "2024-01-10T15:59:29+02:00"
        module: search_engine
        pegcounts:
          max_queued: 498
          total_unique: 34170
          total_flushed: 34170
          total_inserts: 35576
          searched_bytes: 619517278
          qualified_events: 37
          non_qualified_events: 71298

    Rule:
      type: object
      properties:
        sid:
          type: integer
          format: int64
        gid:
          type: integer
          format: int64
        rev:
          type: integer
          format: int64
        action:
          type: string
        message:
          type: string
      example:
        sid: 1
        rev: 1
        gid: 4
        action: alert
        message: Excel spreadsheet subheader (MS Office)

    Profiler:
      type: object
      properties:
        rules:
          type: string
          format: json
      example:
        rules:
          - gid: 1
            rev: 3
            sid: 28476
            alerts: 0
            checks: 3
            timeUs: 45
            matches: 0
            avgCheck: 15
            avgMatch: 0
            suspends: 0
            timeouts: 0
            avgNonMatch: 15
            ruleTimePercentage: 0.00007
          - gid: 1
            rev: 3
            sid: 27144
            alerts: 0
            checks: 3
            timeUs: 25
            matches: 0
            avgCheck: 8
            avgMatch: 0
            suspends: 0
            timeouts: 0
            avgNonMatch: 8
            ruleTimePercentage: 0.00004

    BadRequest:
      type: object
      properties:
        message:
          type: string
          example: The request is malformed or invalid.

    SuccessfullRequest:
      type: object
      properties:
        message:
          type: string
          example: The request is successful.

tags:
  - name: events
  - name: requests
  - name: performance
  - name: rules
  - name: shell

paths:
  /events/:
    get:
      tags:
        - events
      description: Get recorded snort3 events
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int64
                    example: 150
                  next:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=2"
                  previous:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=1"
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      parameters:
        - in: query
          name: src_addr
          schema:
            type: string
          required: false
        - in: query
          name: src_port
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          name: dst_addr
          schema:
            type: string
          required: false
        - in: query
          name: dst_port
          schema:
            type: integer
            format: int64
          required: false
        - name: sid
          in: query
          schema:
            type: integer
            format: int64
          required: false
        - name: proto
          in: query
          schema:
            type: string
          required: false
        - name: page
          in: query
          schema:
            type: integer
            format: int64
          required: false
    patch:
      tags:
        - events
      description: >-
        Mark all recorded events in the database as deleted
        to exclude them from future request results.
      responses:
        '200':
          description: Successfully Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfullRequest'

  /events/count/:
    get:
      tags:
        - events
      description: >-
        Collect count of occurring events by concrete period
        using sid or addrresses pair of events as agregators.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int64
                    example: 150
                  next:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=2"
                  previous:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=1"
                  results:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/EventCountSid'
                        - $ref: '#/components/schemas/EventCountAddr'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      parameters:
        - name: type
          in: query
          description: Type of count (sid or addr)
          schema:
            type: string
            default: sid
            enum:
              - sid
              - addr
          required: true
        - name: period
          in: query
          schema:
            type: string
            enum:
              - all
              - day
              - week
              - month
            default: all
          required: false
        - name: page
          in: query
          schema:
            type: integer
            format: int64
          required: false

  /requests-log/:
    get:
      tags:
        - requests
      description: >-
        Filter user's requests between two timestamps
        (should be less then week)
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int64
                    example: 150
                  next:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=2"
                  previous:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=1"
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Request'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      parameters:
        - in: query
          name: period_start
          schema:
            type: string
            format: timestamp
          required: true
        - in: query
          name: period_stop
          schema:
            type: string
            format: timestamp
          required: true
        - name: page
          in: query
          schema:
            type: integer
            format: int64
          required: false

  /performance-log/:
    get:
      tags:
        - performance
      description: Provide perf_monitor records
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int64
                    example: 150
                  next:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=2"
                  previous:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=1"
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Performance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      parameters:
        - in: query
          name: period_start
          schema:
            type: string
            format: timestamp
          required: true
        - in: query
          name: period_stop
          schema:
            type: string
            format: timestamp
          required: true
        - in: query
          name: module
          schema:
            type: string
          required: false
        - in: query
          name: delta
          schema:
            type: boolean
          required: false
        - name: page
          in: query
          schema:
            type: integer
            format: int64
          required: false

  /rules/:
    get:
      tags:
        - rules
      description: Provide Snort3 rules
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int64
                    example: 150
                  next:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=2"
                  previous:
                    type: string
                    format: url
                    example: "http://127.0.0.1:8000/api/v1/?page=1"
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      parameters:
        - name: gid
          in: query
          schema:
            type: integer
            format: int64
          required: false
        - name: sid
          in: query
          schema:
            type: integer
            format: int64
          required: false
        - name: rev
          in: query
          schema:
            type: integer
            format: int64
          required: false
        - name: page
          in: query
          schema:
            type: integer
            format: int64
          required: false
  /rules/update/:
    post:
      tags:
        - rules
      description: Start process of updating rules.
      responses:
        '202':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfullRequest'

  /shell/:
    post:
      tags:
        - shell
      description: Provide access to snort3 shell through telnet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
                  example: help()
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfullRequest'
        '204':
          description: Need a command
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Provide a command."

  /shell/profiler/:
    get:
      tags:
        - shell
      description: Run profiler module for rules. Need one of two params.
      responses:
        '202':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfullRequest'
        '226':
          description: Previous request in process
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Previous request in process."
      parameters:
        - name: time
          in: query
          schema:
            type: integer
            format: minutes
        - name: until
          in: query
          schema:
            type: string
            format: timestamp

  /shell/profiler/last/:
    get:
      tags:
        - shell
      description: Run profiler module for rules. Need one of two params.
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profiler'
        '226':
          description: Previous request in process
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Previous request in process."
